
import { useState, useEffect } from "react";

export function useBackgroundImage(imagePath: string) {
  const [imageLoaded, setImageLoaded] = useState(false);
  const [imageSrc, setImageSrc] = useState("");
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    const loadImage = async () => {
      console.log(`üîç Tentative de chargement de l'image: ${imagePath}`);
      
      try {
        // V√©rifier que le chemin n'est pas vide
        if (!imagePath) {
          throw new Error("Chemin d'image vide");
        }
        
        // Cr√©er un nouvel objet Image et le pr√©charger
        const img = new Image();
        
        // Promesse pour g√©rer le chargement de l'image
        const imageLoadPromise = new Promise<void>((resolve, reject) => {
          img.onload = () => {
            console.log(`‚úÖ Image charg√©e avec succ√®s: ${imagePath}`);
            resolve();
          };
          
          img.onerror = (e) => {
            console.error(`‚ùå √âchec du chargement de l'image: ${imagePath}`, e);
            reject(new Error(`Image '${imagePath}' non trouv√©e`));
          };
        });
        
        // D√©finir le src apr√®s avoir d√©fini les gestionnaires d'√©v√©nements
        // Ajout d'un param√®tre al√©atoire pour contourner le cache du navigateur
        const cacheBuster = `?nocache=${Date.now()}`;
        const fullPath = imagePath.startsWith('http') ? imagePath : `${imagePath}${cacheBuster}`;
        img.src = fullPath;
        
        // Attendre que l'image soit charg√©e
        await imageLoadPromise;
        
        // Si on arrive ici, l'image est charg√©e avec succ√®s
        setImageSrc(img.src);
        setImageLoaded(true);
        setError(null);
        
      } catch (err) {
        const errorMessage = err instanceof Error ? err.message : "Erreur inconnue";
        console.error(`‚ùå Erreur lors du chargement de l'image: ${errorMessage}`);
        setError(`Image '${imagePath}' non trouv√©e`);
        setImageLoaded(false);
        setImageSrc("");
      }
    };

    loadImage();
  }, [imagePath]);

  return { imageLoaded, imageSrc, error };
}
