
import { useState, useEffect, useCallback } from "react";
import { Message, PREDEFINED_RESPONSES, CAMEROON_CITIES, City, Neighborhood } from "./types";
import { toast } from "sonner";
import { useAuth } from "@/lib/auth";

export function useChatMessages() {
  const { user } = useAuth();
  const [messages, setMessages] = useState<Message[]>([
    {
      id: "welcome",
      content: "Bienvenue sur MboaTer! üëã Je suis votre assistant immobilier virtuel pour le Cameroun. Je peux vous aider sur:\n‚Ä¢ Le march√© immobilier dans toutes les r√©gions\n‚Ä¢ Les quartiers et villes du Cameroun\n‚Ä¢ Conseils pour acheter/vendre/investir\n‚Ä¢ D√©marches administratives\n‚Ä¢ Financement\n\nQue puis-je faire pour vous aujourd'hui?",
      sender: "bot",
      timestamp: new Date()
    }
  ]);
  const [unreadCount, setUnreadCount] = useState(0);
  const [isChatOpen, setIsChatOpen] = useState(false);
  const [typingTimeout, setTypingTimeout] = useState<NodeJS.Timeout | null>(null);
  
  // Contexte de conversation pour am√©liorer la pertinence des r√©ponses
  const [conversationContext, setConversationContext] = useState<{
    lastCity?: string;
    lastRegion?: string;
    lastNeighborhood?: string;
    lastTopic?: string;
    userPreferences?: {
      budget?: string;
      propertyType?: string;
      purpose?: string; // achat, location, investissement
      preferredLocations?: string[];
    };
    userProfile?: {
      isLoggedIn: boolean;
      userType?: string; // particulier, agent, notaire, etc.
      interests?: string[];
    };
    // Historique des recherches r√©centes pour mieux comprendre le contexte
    recentSearches?: string[];
  }>({});

  // Initialisation du contexte utilisateur
  useEffect(() => {
    if (user) {
      setConversationContext(prev => ({
        ...prev,
        userProfile: {
          isLoggedIn: true,
          userType: user.user_metadata?.user_type || "particulier",
          interests: []
        }
      }));
    } else {
      setConversationContext(prev => ({
        ...prev,
        userProfile: {
          isLoggedIn: false
        }
      }));
    }
  }, [user]);

  // R√©initialisation du compteur de messages non lus
  useEffect(() => {
    if (isChatOpen) {
      setUnreadCount(0);
    }
  }, [isChatOpen]);

  // Fonction pour envoyer un message
  const handleSendMessage = useCallback((input: string) => {
    if (!input.trim()) return;

    console.log("Message utilisateur re√ßu:", input);

    // Message de l'utilisateur
    const userMessage: Message = {
      id: `user-${Date.now()}`,
      content: input,
      sender: "user",
      timestamp: new Date()
    };

    setMessages(prev => [...prev, userMessage]);

    // Ajout √† l'historique des recherches r√©centes
    setConversationContext(prev => ({
      ...prev,
      recentSearches: [...(prev.recentSearches || []), input.toLowerCase()]
    }));

    // Indicateur de frappe
    const typingIndicator: Message = {
      id: `typing-${Date.now()}`,
      content: "...",
      sender: "bot",
      timestamp: new Date()
    };

    setMessages(prev => [...prev, typingIndicator]);

    // Analyse et extraction de contexte √† partir de la question
    const normalizedInput = input.toLowerCase().normalize("NFD").replace(/[\u0300-\u036f]/g, "");
    extractContextFromQuery(normalizedInput);

    // D√©lai al√©atoire pour simuler la r√©flexion du bot
    const delay = Math.floor(Math.random() * 800) + 400;
    
    if (typingTimeout) {
      clearTimeout(typingTimeout);
    }
    
    const newTimeout = setTimeout(() => {
      setMessages(prev => {
        const withoutTyping = prev.filter(msg => msg.id !== typingIndicator.id);
        const botResponse = generateResponse(input);
        
        console.log("Contexte de conversation:", conversationContext);
        console.log("R√©ponse g√©n√©r√©e:", botResponse);
        
        const botMessage: Message = {
          id: `bot-${Date.now()}`,
          content: botResponse.content,
          sender: "bot",
          timestamp: new Date(),
          isPersonalized: botResponse.isPersonalized,
          isExpert: botResponse.isExpert,
          relatedToQuestion: input // Tracer la question pour le d√©bogage
        };
        
        // Notification pour les r√©ponses d'expert
        if (botResponse.isExpert) {
          setTimeout(() => {
            toast("Conseil d'expert", {
              description: "Notre assistant vous a fourni une information sp√©cialis√©e",
              duration: 3000,
            });
          }, 500);
        }
        
        return [...withoutTyping, botMessage];
      });
      
      if (!isChatOpen) {
        setUnreadCount(prev => prev + 1);
      }
    }, delay);
    
    setTypingTimeout(newTimeout);
  }, [isChatOpen, typingTimeout, conversationContext]);

  // Extraction de contexte √† partir de la question
  const extractContextFromQuery = (normalizedQuery: string) => {
    // D√©tection de r√©gion
    for (const region in CAMEROON_CITIES) {
      const normalizedRegion = region.toLowerCase().normalize("NFD").replace(/[\u0300-\u036f]/g, "");
      if (normalizedQuery.includes(normalizedRegion)) {
        setConversationContext(prev => ({ ...prev, lastRegion: region }));
        break;
      }
    }

    // D√©tection de ville
    for (const region in CAMEROON_CITIES) {
      for (const city of CAMEROON_CITIES[region]) {
        const normalizedCityName = city.name.toLowerCase().normalize("NFD").replace(/[\u0300-\u036f]/g, "");
        if (normalizedQuery.includes(normalizedCityName)) {
          setConversationContext(prev => ({ 
            ...prev, 
            lastCity: city.name, 
            lastRegion: city.region 
          }));
          break;
        }
      }
    }

    // D√©tection de quartier
    for (const region in CAMEROON_CITIES) {
      for (const city of CAMEROON_CITIES[region]) {
        for (const neighborhood of city.neighborhoods) {
          const normalizedNeighborhoodName = neighborhood.name.toLowerCase().normalize("NFD").replace(/[\u0300-\u036f]/g, "");
          if (normalizedQuery.includes(normalizedNeighborhoodName)) {
            setConversationContext(prev => ({ 
              ...prev, 
              lastNeighborhood: neighborhood.name,
              lastCity: city.name,
              lastRegion: city.region 
            }));
            break;
          }
        }
      }
    }

    // D√©tection de pr√©f√©rences
    if (normalizedQuery.includes("acheter") || normalizedQuery.includes("achat")) {
      setConversationContext(prev => ({
        ...prev,
        userPreferences: { ...prev.userPreferences, purpose: "achat" }
      }));
    } else if (normalizedQuery.includes("louer") || normalizedQuery.includes("location")) {
      setConversationContext(prev => ({
        ...prev,
        userPreferences: { ...prev.userPreferences, purpose: "location" }
      }));
    } else if (normalizedQuery.includes("investir") || normalizedQuery.includes("investissement")) {
      setConversationContext(prev => ({
        ...prev,
        userPreferences: { ...prev.userPreferences, purpose: "investissement" }
      }));
    }

    // D√©tection de type de bien
    if (normalizedQuery.includes("maison") || normalizedQuery.includes("villa")) {
      setConversationContext(prev => ({
        ...prev,
        userPreferences: { ...prev.userPreferences, propertyType: "maison" }
      }));
    } else if (normalizedQuery.includes("appartement")) {
      setConversationContext(prev => ({
        ...prev,
        userPreferences: { ...prev.userPreferences, propertyType: "appartement" }
      }));
    } else if (normalizedQuery.includes("terrain") || normalizedQuery.includes("parcelle")) {
      setConversationContext(prev => ({
        ...prev,
        userPreferences: { ...prev.userPreferences, propertyType: "terrain" }
      }));
    } else if (normalizedQuery.includes("bureau") || normalizedQuery.includes("commerce")) {
      setConversationContext(prev => ({
        ...prev,
        userPreferences: { ...prev.userPreferences, propertyType: "commercial" }
      }));
    }

    // D√©tection de budget
    const budgetRegex = /(\d+)\s*(millions?|million|m|fcfa|franc|xaf)/i;
    const budgetMatch = normalizedQuery.match(budgetRegex);
    if (budgetMatch) {
      let budget = budgetMatch[1];
      if (budgetMatch[2].toLowerCase().startsWith('m')) {
        budget = budget + " millions FCFA";
      } else {
        budget = budget + " FCFA";
      }
      setConversationContext(prev => ({
        ...prev,
        userPreferences: { ...prev.userPreferences, budget: budget }
      }));
    }
  };

  // Fonction pour trouver les informations sur une ville
  const findCityInfo = (cityName: string): City | null => {
    const normalizedCityName = cityName.toLowerCase().normalize("NFD").replace(/[\u0300-\u036f]/g, "");
    
    for (const region in CAMEROON_CITIES) {
      const cityInfo = CAMEROON_CITIES[region].find(
        city => city.name.toLowerCase().normalize("NFD").replace(/[\u0300-\u036f]/g, "") === normalizedCityName
      );
      
      if (cityInfo) {
        return cityInfo;
      }
    }
    
    return null;
  };

  // Fonction pour trouver les informations sur un quartier
  const findNeighborhoodInfo = (cityName: string, neighborhoodName: string): Neighborhood | null => {
    const city = findCityInfo(cityName);
    if (!city) return null;
    
    const normalizedNeighborhoodName = neighborhoodName.toLowerCase().normalize("NFD").replace(/[\u0300-\u036f]/g, "");
    
    for (const neighborhood of city.neighborhoods) {
      const normalizedName = neighborhood.name.toLowerCase().normalize("NFD").replace(/[\u0300-\u036f]/g, "");
      if (normalizedName === normalizedNeighborhoodName) {
        return neighborhood;
      }
    }
    
    return null;
  };

  // Fonction pour obtenir les quartiers populaires d'une ville
  const getPopularNeighborhoods = (cityName: string): string => {
    const city = findCityInfo(cityName);
    if (!city) return "Je n'ai pas d'informations sur cette ville.";
    
    const popularNeighborhoods = city.neighborhoods
      .filter(n => n.isPopular)
      .map(n => n.name)
      .join(", ");
    
    return `√Ä ${city.name}, les quartiers les plus recherch√©s sont ${popularNeighborhoods}. ${city.description} Les prix immobiliers varient g√©n√©ralement entre ${city.priceRange}.`;
  };

  // Fonction pour g√©n√©rer une r√©ponse personnalis√©e
  const generatePersonalizedResponse = (normalizedQuestion: string): { content: string, isPersonalized: boolean, isExpert: boolean } | null => {
    const { userProfile, userPreferences, lastCity, lastRegion } = conversationContext;
    
    // Personnalisation pour utilisateurs connect√©s
    if (userProfile?.isLoggedIn) {
      // R√©ponse pour professionnels
      if (userProfile.userType && userProfile.userType !== "particulier") {
        if (normalizedQuestion.includes("conseil") || normalizedQuestion.includes("expertise") || normalizedQuestion.includes("professionnel")) {
          const professionalResponses = PREDEFINED_RESPONSES["professionnel"];
          if (professionalResponses) {
            return {
              content: professionalResponses[Math.floor(Math.random() * professionalResponses.length)],
              isPersonalized: true,
              isExpert: true
            };
          }
        }
      }
      
      // Personnalisation bas√©e sur les pr√©f√©rences utilisateur
      if (userPreferences) {
        if (lastCity && userPreferences.purpose) {
          const city = findCityInfo(lastCity);
          if (city) {
            const popularAreas = city.neighborhoods
              .filter(n => n.isPopular)
              .map(n => n.name)
              .slice(0, 3)
              .join(", ");
            
            return {
              content: `Selon votre profil et votre int√©r√™t pour ${userPreferences.purpose === "achat" ? "l'achat" : 
                         userPreferences.purpose === "location" ? "la location" : "l'investissement"}, 
                       √† ${city.name}, je vous recommande particuli√®rement les quartiers de ${popularAreas}.
                       ${userPreferences.budget ? `Avec un budget de ${userPreferences.budget}, vous pourriez ${
                         userPreferences.purpose === "achat" ? "acqu√©rir" : 
                         userPreferences.purpose === "location" ? "louer" : "investir dans"
                       } un bien de bonne qualit√© dans ces zones.` : ""}`,
              isPersonalized: true,
              isExpert: true
            };
          }
        }
      }
    }
    
    return null;
  };

  // Fonction principale pour g√©n√©rer une r√©ponse
  const generateResponse = (question: string): { content: string, isPersonalized: boolean, isExpert: boolean } => {
    const normalizedQuestion = question.toLowerCase().normalize("NFD").replace(/[\u0300-\u036f]/g, "");
    console.log("G√©n√©ration de r√©ponse pour:", normalizedQuestion);
    
    // NOUVEAU: D√©tection directe des questions sur les terrains √† Yaound√©
    if (normalizedQuestion.includes("terrain") && normalizedQuestion.includes("yaounde")) {
      return {
        content: "√Ä Yaound√©, les meilleurs terrains se trouvent dans les quartiers de Odza, Nsimeyong et Mfandena. Ces zones offrent un bon compromis entre accessibilit√©, s√©curit√© et potentiel de valorisation. Les prix varient entre 15 000 et 35 000 FCFA/m¬≤ selon l'emplacement et la viabilisation. Les zones en expansion comme Nkoabang et Simbock pr√©sentent √©galement de bonnes opportunit√©s d'investissement avec des prix plus abordables.",
        isPersonalized: false,
        isExpert: true
      };
    }
    
    // Tentative de r√©ponse personnalis√©e
    const personalizedResponse = generatePersonalizedResponse(normalizedQuestion);
    if (personalizedResponse) return personalizedResponse;
    
    // V√©rification si c'est une question d'expert
    const isExpertQuestion = 
      normalizedQuestion.includes("exactement") || 
      normalizedQuestion.includes("precisement") || 
      normalizedQuestion.includes("pr√©cis√©ment") ||
      normalizedQuestion.includes("detail") || 
      normalizedQuestion.includes("d√©tail") ||
      normalizedQuestion.includes("expliquez") ||
      normalizedQuestion.includes("pourquoi") ||
      (normalizedQuestion.includes("comment") && (
        normalizedQuestion.includes("fonctionne") || 
        normalizedQuestion.includes("proc√©dure") || 
        normalizedQuestion.includes("procedure")
      ));
    
    // D√©tection de demande sur une ville sp√©cifique
    const cityRegex = /(?:a|de|sur|pour|dans|quartiers?(?:\sde)?)\s+([a-zA-Z√©\s]+?)(?:$|\s+[?.,]|\s+(?:qui|pour|comment|est|sont))/i;
    const cityMatch = normalizedQuestion.match(cityRegex);
    
    // NOUVEAU: D√©tection sp√©cifique des questions sur les terrains
    if (normalizedQuestion.includes("terrain") || normalizedQuestion.includes("parcelle")) {
      // V√©rifier s'il y a une ville mentionn√©e
      if (conversationContext.lastCity) {
        return {
          content: `√Ä ${conversationContext.lastCity}, les terrains les plus int√©ressants se trouvent ${
            conversationContext.lastCity === "Yaound√©" ? "dans les quartiers d'Odza, Nsimeyong et Mfandena" : 
            conversationContext.lastCity === "Douala" ? "dans les quartiers de Yassa, Logbessou et Bonamoussadi" :
            "g√©n√©ralement en p√©riph√©rie de la ville, dans les zones en d√©veloppement"
          }. Les prix varient entre ${
            conversationContext.lastCity === "Yaound√©" ? "15 000 et 35 000 FCFA/m¬≤" : 
            conversationContext.lastCity === "Douala" ? "20 000 et 40 000 FCFA/m¬≤" :
            "10 000 et 25 000 FCFA/m¬≤"
          } selon l'emplacement et la viabilisation.`,
          isPersonalized: false,
          isExpert: true
        };
      }
    }
    
    if (cityMatch) {
      const potentialCity = cityMatch[1].trim();
      if (potentialCity && potentialCity.length > 3) {
        // V√©rifier si c'est une demande de quartiers
        if (normalizedQuestion.includes("quartier")) {
          const cityInfo = findCityInfo(potentialCity);
          if (cityInfo) {
            return {
              content: getPopularNeighborhoods(potentialCity),
              isPersonalized: false,
              isExpert: true
            };
          }
        }
        
        // NOUVEAU: V√©rifier si c'est une demande sur les terrains dans une ville
        if (normalizedQuestion.includes("terrain") || normalizedQuestion.includes("parcelle")) {
          const cityInfo = findCityInfo(potentialCity);
          if (cityInfo) {
            return {
              content: `√Ä ${cityInfo.name}, les terrains les plus int√©ressants se trouvent ${
                cityInfo.name === "Yaound√©" ? "dans les quartiers d'Odza, Nsimeyong et Mfandena" : 
                cityInfo.name === "Douala" ? "dans les quartiers de Yassa, Logbessou et Bonamoussadi" :
                "g√©n√©ralement en p√©riph√©rie de la ville, dans les zones en d√©veloppement"
              }. Les prix varient entre ${
                cityInfo.name === "Yaound√©" ? "15 000 et 35 000 FCFA/m¬≤" : 
                cityInfo.name === "Douala" ? "20 000 et 40 000 FCFA/m¬≤" :
                "10 000 et 25 000 FCFA/m¬≤"
              } selon l'emplacement et la viabilisation.`,
              isPersonalized: false,
              isExpert: true
            };
          }
        }
        
        // V√©rifier si c'est une demande sur la ville en g√©n√©ral
        const cityInfo = findCityInfo(potentialCity);
        if (cityInfo) {
          const popularAreas = cityInfo.neighborhoods
            .filter(n => n.isPopular)
            .map(n => n.name)
            .join(", ");
            
          return {
            content: `${cityInfo.name} est situ√©e dans la r√©gion ${cityInfo.region} du Cameroun. ${cityInfo.description}
Les prix immobiliers y varient g√©n√©ralement entre ${cityInfo.priceRange}.
Les quartiers les plus recherch√©s sont ${popularAreas}.`,
            isPersonalized: false,
            isExpert: true
          };
        }
      }
    }
    
    // D√©tection de quartier sp√©cifique
    const neighborhoodRegex = /(?:quartier|zone|secteur)\s+([a-zA-Z√©\s]+?)(?:$|\s+[?.,]|\s+(?:a|de|qui|pour|comment|est|sont))/i;
    const neighborhoodMatch = normalizedQuestion.match(neighborhoodRegex);
    
    if (neighborhoodMatch) {
      const potentialNeighborhood = neighborhoodMatch[1].trim();
      if (potentialNeighborhood && potentialNeighborhood.length > 3) {
        // Si contexte de ville, chercher dans cette ville
        if (conversationContext.lastCity) {
          const neighborhoodInfo = findNeighborhoodInfo(conversationContext.lastCity, potentialNeighborhood);
          if (neighborhoodInfo) {
            const city = findCityInfo(conversationContext.lastCity);
            return {
              content: `Le quartier ${neighborhoodInfo.name} √† ${conversationContext.lastCity} est ${
                neighborhoodInfo.isPopular ? "l'un des plus pris√©s" : "un quartier int√©ressant"
              } de la ville. ${neighborhoodInfo.description || ""} ${
                neighborhoodInfo.isPopular && city 
                  ? `Les prix y sont g√©n√©ralement dans la fourchette haute de ${city.priceRange}.` 
                  : ""
              }`,
              isPersonalized: false,
              isExpert: true
            };
          }
        }
        
        // Recherche dans toutes les villes principales
        for (const region in CAMEROON_CITIES) {
          for (const city of CAMEROON_CITIES[region]) {
            const neighborhoodInfo = findNeighborhoodInfo(city.name, potentialNeighborhood);
            if (neighborhoodInfo) {
              return {
                content: `Le quartier ${neighborhoodInfo.name} se trouve √† ${city.name} (r√©gion ${city.region}). C'est ${
                  neighborhoodInfo.isPopular ? "l'un des quartiers les plus pris√©s" : "un quartier"
                } de la ville. ${neighborhoodInfo.description || ""} ${
                  neighborhoodInfo.isPopular
                    ? `Les prix immobiliers y sont g√©n√©ralement dans la fourchette haute de ${city.priceRange}.` 
                    : ""
                }`,
                isPersonalized: false,
                isExpert: true
              };
            }
          }
        }
      }
    }
    
    // NOUVEAU: D√©tection am√©lior√©e des questions sur les meilleurs emplacements
    if ((normalizedQuestion.includes("meilleur") || normalizedQuestion.includes("mieux") || 
         normalizedQuestion.includes("ideal") || normalizedQuestion.includes("id√©al") || 
         normalizedQuestion.includes("bon")) && 
        (normalizedQuestion.includes("endroit") || normalizedQuestion.includes("emplacement") || 
         normalizedQuestion.includes("quartier") || normalizedQuestion.includes("lieu") ||
         normalizedQuestion.includes("zone") || normalizedQuestion.includes("terrain"))) {
        
      // Chercher si une ville est mentionn√©e ou en contexte
      const cityName = conversationContext.lastCity || 
                      (cityMatch ? cityMatch[1].trim() : null) ||
                      (normalizedQuestion.includes("yaounde") ? "Yaound√©" : 
                       normalizedQuestion.includes("douala") ? "Douala" : null);
                       
      if (cityName) {
        const cityInfo = findCityInfo(cityName);
        if (cityInfo) {
          const bestAreas = cityInfo.neighborhoods
            .filter(n => n.isPopular)
            .map(n => n.name)
            .slice(0, 3)
            .join(", ");
            
          return {
            content: `Les meilleurs emplacements √† ${cityInfo.name} sont ${bestAreas}. Ces quartiers offrent un excellent compromis entre accessibilit√©, s√©curit√© et qualit√© de vie. ${
              normalizedQuestion.includes("terrain") ? 
              `Pour les terrains sp√©cifiquement, les zones de ${
                cityInfo.name === "Yaound√©" ? "Odza, Nsimeyong et Mfandena" : 
                cityInfo.name === "Douala" ? "Yassa, Logbessou et Bonamoussadi" :
                "la p√©riph√©rie en d√©veloppement"
              } offrent le meilleur potentiel d'investissement.` : ""
            }`,
            isPersonalized: false,
            isExpert: true
          };
        }
      }
    }
    
    // Recherche de mots-cl√©s dans la question
    const keywordMappings: Record<string, string[]> = {
      "prix": ["cout", "coute", "cher", "budget", "prix", "tarif", "combien", "fcfa", "xaf", "euro", "dollar"],
      "vente": ["vendre", "vente", "mettre en vente", "vends", "c√©der", "ceder", "mise en vente"],
      "location": ["louer", "location", "bail", "locataire", "proprietaire", "propri√©taire"],
      "document": ["document", "papier", "titre", "foncier", "contrat", "acte", "cadastre", "l√©gal", "legal"],
      "investissement": ["investir", "investissement", "placement", "rendement", "rentabilit√©", "rentabilite"],
      "cr√©dit": ["credit", "cr√©dit", "pret", "pr√™t", "banque", "financement", "financer", "emprunt"],
      "construction": ["construire", "construction", "b√¢tir", "batir", "chantier", "architecte", "entrepreneur"],
      "quartier": ["quartier", "zone", "secteur", "emplacement", "lieu"],
      "notaire": ["notaire", "acte", "authentique", "officiel", "l√©galisation", "legalisation"],
      "regions": ["region", "r√©gions", "province", "cameroun", "pays"],
      "villes": ["ville", "cit√©", "urban", "agglomeration", "m√©tropole"],
      "s√©curit√©": ["securite", "s√©curit√©", "arnaque", "fraude", "confiance", "fiable", "s√ªr", "sur"],
      "visite": ["visite", "visiter", "voir", "rendez-vous", "rendez", "rendezvous", "rdv"],
      "estimation": ["estimer", "estimation", "evaluer", "√©valuer", "evaluation", "√©valuation", "valeur", "vaut"],
      "expertise": ["expert", "sp√©cialiste", "professionnel", "expertise", "sp√©cialise", "sp√©cialis√©"],
      "professionnel": ["agent", "courtier", "promoteur", "profession", "notaire", "architecte", "expert"]
    };
    
    // Recherche par mots-cl√©s
    for (const [category, keywords] of Object.entries(keywordMappings)) {
      if (keywords.some(keyword => normalizedQuestion.includes(keyword))) {
        // Mise √† jour du contexte
        setConversationContext(prev => ({
          ...prev,
          lastTopic: category
        }));
        
        const response = getRandomResponse(category);
        return {
          content: response,
          isPersonalized: false,
          isExpert: isExpertQuestion
        };
      }
    }
    
    // Questions sp√©cifiques
    if (normalizedQuestion.includes("meilleur") && normalizedQuestion.includes("moment")) {
      return {
        content: isExpertQuestion 
          ? "Le meilleur moment pour acheter est g√©n√©ralement en d√©but d'ann√©e ou pendant la saison des pluies (juin-septembre) quand il y a moins d'activit√© sur le march√©. Les prix sont souvent plus n√©gociables √† ces p√©riodes. Les statistiques montrent une baisse d'activit√© de 15-20% pendant ces p√©riodes, ce qui donne un avantage aux acheteurs."
          : "Le meilleur moment pour acheter est g√©n√©ralement en d√©but d'ann√©e ou pendant la saison des pluies (juin-septembre) quand il y a moins d'activit√© sur le march√©. Les prix sont souvent plus n√©gociables √† ces p√©riodes.",
        isPersonalized: false,
        isExpert: isExpertQuestion
      };
    }
    
    if ((normalizedQuestion.includes("delai") || normalizedQuestion.includes("dur√©e") || normalizedQuestion.includes("duree") || normalizedQuestion.includes("temps")) && 
        (normalizedQuestion.includes("vente") || normalizedQuestion.includes("vendre") || normalizedQuestion.includes("transaction"))) {
      return {
        content: isExpertQuestion
          ? "La dur√©e moyenne d'une transaction immobili√®re compl√®te au Cameroun est de 2 √† 3 mois. Cela inclut: la p√©riode de mise en vente (2-3 semaines), les visites (1-2 semaines), la n√©gociation (1-2 semaines), et les formalit√©s administratives et notariales (3-4 semaines). La v√©rification du titre foncier peut parfois allonger ce d√©lai, surtout dans les zones rurales."
          : "La dur√©e moyenne d'une transaction immobili√®re compl√®te au Cameroun est de 2 √† 3 mois. Cela inclut la p√©riode de mise en vente, les visites, la n√©gociation, et les formalit√©s administratives et notariales.",
        isPersonalized: false,
        isExpert: isExpertQuestion
      };
    }
    
    if (normalizedQuestion.includes("merci") || normalizedQuestion.includes("super") || normalizedQuestion.includes("excellent")) {
      return {
        content: "Je vous en prie, c'est un plaisir de vous aider! N'h√©sitez pas si vous avez d'autres questions concernant l'immobilier au Cameroun.",
        isPersonalized: false,
        isExpert: false
      };
    }
    
    // Proposition de sujet si la question n'est pas claire
    if (normalizedQuestion.length < 15 || !normalizedQuestion.includes("?")) {
      let suggestedTopic = "";
      
      if (conversationContext.lastCity) {
        suggestedTopic = `Pour ${conversationContext.lastCity}, je peux vous renseigner sur les quartiers pris√©s, les prix du march√©, ou les opportunit√©s d'investissement. Que souhaitez-vous savoir plus pr√©cis√©ment?`;
      } else if (conversationContext.lastRegion) {
        suggestedTopic = `Concernant la r√©gion ${conversationContext.lastRegion}, je peux vous informer sur les principales villes, le march√© immobilier local ou les sp√©cificit√©s de cette zone. Que voulez-vous explorer?`;
      } else if (conversationContext.lastTopic) {
        suggestedTopic = `Pour approfondir sur le sujet "${conversationContext.lastTopic}", avez-vous des questions plus sp√©cifiques? Je peux vous donner des d√©tails pr√©cis adapt√©s √† votre situation.`;
      } else {
        suggestedTopic = "Je peux vous renseigner sur les villes et quartiers du Cameroun, les prix du march√©, les d√©marches d'achat/vente, ou l'investissement immobilier. Quel sujet vous int√©resse en particulier?";
      }
      
      return {
        content: suggestedTopic,
        isPersonalized: false,
        isExpert: false
      };
    }
    
    // R√©ponse par d√©faut
    return {
      content: getRandomResponse("default"),
      isPersonalized: false,
      isExpert: false
    };
  };

  // Fonction pour obtenir une r√©ponse al√©atoire d'une cat√©gorie
  const getRandomResponse = (category: string): string => {
    const responses = PREDEFINED_RESPONSES[category] || PREDEFINED_RESPONSES["default"];
    return responses[Math.floor(Math.random() * responses.length)];
  };

  // Basculer l'√©tat d'ouverture du chat
  const toggleChat = useCallback(() => {
    setIsChatOpen(!isChatOpen);
    if (!isChatOpen) {
      setUnreadCount(0);
    }
  }, [isChatOpen]);

  // Nettoyage au d√©montage
  useEffect(() => {
    return () => {
      if (typingTimeout) {
        clearTimeout(typingTimeout);
      }
    };
  }, [typingTimeout]);

  return {
    messages,
    unreadCount,
    isChatOpen,
    handleSendMessage,
    toggleChat
  };
}
